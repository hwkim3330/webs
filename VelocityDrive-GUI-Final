#!/bin/bash
#############################################################
# VelocityDRIVE Touch GUI - Final Production Launcher
# One-click execution with hardware detection and demo mode
#############################################################

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# Logo
echo -e "${BLUE}"
cat << 'EOF'
╔══════════════════════════════════════════════════════════════╗
║  ██╗   ██╗███████╗██╗      ██████╗  ██████╗██╗████████╗██╗   ║
║  ██║   ██║██╔════╝██║     ██╔═══██╗██╔════╝██║╚══██╔══╝╚██╗  ║
║  ██║   ██║█████╗  ██║     ██║   ██║██║     ██║   ██║    ╚██╗ ║
║  ╚██╗ ██╔╝██╔══╝  ██║     ██║   ██║██║     ██║   ██║    ██╔╝ ║
║   ╚████╔╝ ███████╗███████╗╚██████╔╝╚██████╗██║   ██║   ██╔╝  ║
║    ╚═══╝  ╚══════╝╚══════╝ ╚═════╝  ╚═════╝╚═╝   ╚═╝   ╚═╝   ║
║                                                              ║
║              DRIVE Touch GUI - Complete Control Center       ║
║                    Microchip LAN9662 Platform               ║
║                     🚀 Powered by Claude Code               ║
╚══════════════════════════════════════════════════════════════╝
EOF
echo -e "${NC}"

echo -e "${CYAN}🎯 VelocityDRIVE Touch GUI v2025.07.12${NC}"
echo -e "${CYAN}📱 Touch-Optimized Web Interface for Raspberry Pi${NC}"
echo ""

# Check Python
if ! command -v python3 &> /dev/null; then
    echo -e "${RED}❌ Python3가 설치되어 있지 않습니다.${NC}"
    echo "설치: sudo apt-get install python3 python3-pip"
    exit 1
fi

# Install dependencies
echo -e "${YELLOW}📦 의존성 패키지 확인 중...${NC}"
MISSING_PACKAGES=()

for package in flask flask-cors pyserial; do
    if ! python3 -c "import ${package//-/_}" 2>/dev/null; then
        MISSING_PACKAGES+=($package)
    fi
done

if [ ${#MISSING_PACKAGES[@]} -gt 0 ]; then
    echo -e "${YELLOW}📥 필요한 패키지 설치 중: ${MISSING_PACKAGES[*]}${NC}"
    pip3 install --break-system-packages "${MISSING_PACKAGES[@]}" 2>/dev/null || \
    pip3 install "${MISSING_PACKAGES[@]}" 2>/dev/null
    echo -e "${GREEN}✅ 패키지 설치 완료${NC}"
fi

# Kill existing servers
pkill -f "python3 app" 2>/dev/null

# Hardware detection
echo -e "${YELLOW}🔍 하드웨어 감지 중...${NC}"
HARDWARE_FOUND=false

if [ -e "/dev/ttyACM0" ] || [ -e "/dev/ttyUSB0" ]; then
    HARDWARE_FOUND=true
    echo -e "${GREEN}✅ VelocityDRIVE 하드웨어 감지됨${NC}"
fi

# Choose mode
if [ "$HARDWARE_FOUND" = true ]; then
    echo ""
    echo -e "${PURPLE}🎛️  실행 모드 선택:${NC}"
    echo -e "  ${GREEN}1)${NC} 하드웨어 모드 (실제 LAN9662 보드 연결)"
    echo -e "  ${BLUE}2)${NC} 데모 모드 (시뮬레이션, 하드웨어 불필요)"
    echo ""
    read -p "모드를 선택하세요 (1/2, 기본값: 1): " mode_choice

    if [ "$mode_choice" = "2" ]; then
        SERVER_FILE="app_demo.py"
        MODE_NAME="데모 모드"
        echo -e "${BLUE}🎭 데모 모드로 시작합니다${NC}"
    else
        SERVER_FILE="app_complete.py"
        MODE_NAME="하드웨어 모드"
        echo -e "${GREEN}🔧 하드웨어 모드로 시작합니다${NC}"
    fi
else
    SERVER_FILE="app_demo.py"
    MODE_NAME="데모 모드"
    echo -e "${BLUE}🎭 하드웨어가 감지되지 않아 데모 모드로 시작합니다${NC}"
fi

# Start server
echo ""
echo -e "${GREEN}🚀 ${MODE_NAME} 서버 시작 중...${NC}"

if [ ! -f "$SERVER_FILE" ]; then
    echo -e "${RED}❌ 서버 파일을 찾을 수 없습니다: $SERVER_FILE${NC}"
    exit 1
fi

python3 "$SERVER_FILE" > /tmp/velocitydrive.log 2>&1 &
SERVER_PID=$!

# Wait for server
sleep 3

# Check if server started
if kill -0 $SERVER_PID 2>/dev/null; then
    echo -e "${GREEN}✅ 서버가 성공적으로 시작되었습니다! (PID: $SERVER_PID)${NC}"
    echo ""

    # Display access info
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${GREEN}🌐 웹 브라우저에서 접속:${NC}"
    echo ""
    echo -e "   ${YELLOW}🏠 로컬 접속:${NC} ${CYAN}http://localhost:8080${NC}"

    # Get IP address
    IP=$(ip -4 addr show | grep -oP '(?<=inet\s)\d+(\.\d+){3}' | grep -v 127.0.0.1 | head -1)
    if [ ! -z "$IP" ]; then
        echo -e "   ${YELLOW}🌍 외부 접속:${NC} ${CYAN}http://$IP:8080${NC}"
    fi

    echo ""
    echo -e "${GREEN}📱 터치스크린 최적화:${NC}"
    echo -e "   • 44px 이상 터치 타겟"
    echo -e "   • 7인치 디스플레이 최적화"
    echo -e "   • 키오스크 모드 지원"
    echo ""

    if [ "$SERVER_FILE" = "app_demo.py" ]; then
        echo -e "${BLUE}🎭 데모 모드 특징:${NC}"
        echo -e "   • 하드웨어 없이 모든 기능 테스트"
        echo -e "   • 실시간 데이터 시뮬레이션"
        echo -e "   • 완전한 CLI 명령어 지원"
        echo ""
    else
        echo -e "${GREEN}🔧 하드웨어 모드 특징:${NC}"
        echo -e "   • 실제 LAN9662 보드 제어"
        echo -e "   • 실시간 TSN 모니터링"
        echo -e "   • 펌웨어 업데이트 지원"
        echo ""
    fi

    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"

    # Auto-open browser
    if [ -n "$DISPLAY" ]; then
        echo ""
        echo -e "${YELLOW}🔄 브라우저 자동 실행 중...${NC}"
        sleep 1

        if command -v xdg-open &> /dev/null; then
            xdg-open http://localhost:8080 2>/dev/null &
        elif command -v chromium-browser &> /dev/null; then
            chromium-browser --kiosk http://localhost:8080 2>/dev/null &
        elif command -v firefox &> /dev/null; then
            firefox http://localhost:8080 2>/dev/null &
        fi

        echo -e "${GREEN}✅ 브라우저가 열렸습니다!${NC}"
    else
        echo -e "${YELLOW}💡 웹 브라우저에서 위 주소로 접속하세요${NC}"
    fi

    echo ""
    echo -e "${PURPLE}🎮 지원되는 기능:${NC}"
    echo -e "   • Device Management (디바이스 관리)"
    echo -e "   • YANG Operations (YANG 데이터 조작)"
    echo -e "   • TSN Configuration (PTP, TAS, CBS, FRER)"
    echo -e "   • Protocol Support (CoAP, MUP1)"
    echo -e "   • Firmware Management (펌웨어 관리)"
    echo -e "   • Advanced Operations (Import/Export)"
    echo -e "   • Console Interface (직접 CLI 제어)"
    echo ""
    echo -e "${RED}🛑 종료하려면 Ctrl+C를 누르세요${NC}"
    echo ""

    # Signal handling
    trap 'echo -e "\n${RED}🛑 서버 종료 중...${NC}"; kill $SERVER_PID 2>/dev/null; echo -e "${GREEN}✅ 안전하게 종료되었습니다${NC}"; exit 0' INT TERM

    # Monitor server
    while kill -0 $SERVER_PID 2>/dev/null; do
        sleep 1
    done

    echo -e "${RED}⚠️  서버가 예기치 않게 종료되었습니다${NC}"
    echo "로그 확인: cat /tmp/velocitydrive.log"

else
    echo -e "${RED}❌ 서버 시작 실패!${NC}"
    echo "로그 확인: cat /tmp/velocitydrive.log"
    echo ""
    echo "문제 해결:"
    echo "  1. 포트 8080이 사용 중인지 확인: sudo netstat -tlnp | grep 8080"
    echo "  2. Python 패키지 재설치: pip3 install --force-reinstall flask flask-cors pyserial"
    echo "  3. 권한 확인: ls -la $SERVER_FILE"
    exit 1
fi